<%= app_name %>.App =
  init: ->
    # This sets the background color of the master UIView
    Ti.UI.iPhone.statusBarStyle = Titanium.UI.iPhone.StatusBar.OPAQUE_BLACK

    # Return the currently logged in user from App persisted properties
    currentUser: ->
      userData = Ti.App.Properties.getString('user')
      if userData?
        user = JSON.parse(userData)
        return user
      else
        null

    # Authenticate a user
    authenticate: (login, password) ->
      Ti.API.debug('<%= app_name %>.App.authenticate')
      this.api = new <%= app_name %>.API(login, password)
      this.api.authenticate
        success: (user) ->
          # Stash the user for `.currentUser()`
          Ti.App.Properties.setString('user', JSON.stringify(user))
          # Stash the username/password for the user later
          Ti.App.Properties.setString 'login', login
          Ti.App.Properties.setString 'password', password
          # Call any other callbacks
          Ti.App.fireEvent 'login:success', user.username
        error: (e) ->
          Ti.API.error(e)

    # Attempt to login with saved credentials
    hasCurrentSession: ->
      login = Ti.App.Properties.getString 'login'
      password = Ti.App.Properties.getString 'password'
      if login? and password?
        Ti.API.debug "Found current session with login: #{login}"
        this.api = new <%= app_name %>.API(login, password)
      else
        Ti.API.debug "No current session found", login, password
      login? and password?

    # Clears the current session by removing the persisted property for user
    signOut: ->
      Ti.App.Properties.removeProperty 'user'
      Ti.App.Properties.removeProperty 'login'
      Ti.App.Properties.removeProperty 'password'
      Ti.App.fireEvent 'logout'

    # A function to open the login window
    showLogin = () ->
      login = <%= app_name %>.Views.createLoginWindow
        title: 'Login'
        id: 'loginWindow'

      # Open the login window modally with no nav bar
      login.open
        modal: true
        navBarHidden: true

    <%= app_name %>.App.initTabGroup()

  initTabGroup: ->
    # # Create a new TabGroup to manage tabs
    <%= app_name %>.App.tabGroup = Ti.UI.createTabGroup()

    # ### Set up the **sampleWindow**
    sampleWindow = <%= app_name %>.Views.createSampleWindow
      title: 'sample'
      id: 'sampleWindow'

      # Titanium magic to handle orientation changes
      orientationModes: [
        Ti.UI.PORTRAIT
        Ti.UI.UPSIDE_PORTRAIT
        Ti.UI.LANDSCAPE_LEFT
        Ti.UI.LANDSCAPE_RIGHT
      ]

    # ### Set up the Sample Window
    <%= app_name %>.App.sampleTab = Ti.UI.createTab
      id: 'sampleTab'
      className: 'tabElement'
      title: 'sample'
      window: sampleWindow

    <%= app_name %>.App.tabGroup.addTab <%= app_name %>.App.sampleTab

    # ### Set up the ***Settings Window***
    settingsWindow = <%= app_name %>.Views.createSettingsWindow
      title: 'Settings'
      id: 'settingsWindow'

      # Titanium magic to handle orientation changes
      orientationModes: [
        Ti.UI.PORTRAIT
        Ti.UI.UPSIDE_PORTRAIT
        Ti.UI.LANDSCAPE_LEFT
        Ti.UI.LANDSCAPE_RIGHT
      ]

    <%= app_name %>.App.settingsTab = Ti.UI.createTab
      id: 'settingsTab'
      className: 'tabElement'
      title: 'settings'
      window: settingsWindow

    <%= app_name %>.App.tabGroup.addTab <%= app_name %>.App.settingsTab

    # Open the TabGroup and first window via selecte tab
    <%= app_name %>.App.tabGroup.open()

